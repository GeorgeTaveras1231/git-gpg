#! /usr/bin/env bash

support_path=$(dirname $(which git-gpg))
source $support_path/global.bash
source $support_path/utils.bash
source $support_path/init.bash
source $support_path/hide.bash
source $support_path/clean.bash
source $support_path/addperson.bash
source $support_path/whoknows.bash
source $support_path/burn.bash

diff() {
  anchor_version=${1-HEAD}
  for file in $(hidden_files); do
    stripped_file_name=$(echo $file | sed -e "s#$project_root/##")

    git show $anchor_version:$stripped_file_name | \
    gpg --decrypt | \
    git diff --no-index -- - $(raw_file_for $file)
  done
}

reveal() {
  for file in $(hidden_files); do
    raw_destination $file | xargs mkdir -p
    raw_file="$(raw_file_for $file)"

    if [[ -f $raw_file ]]; then
      read -r -p "$raw_file exists. Confirm override? [y/N] " response
      case $response in
        [nN]) exit 0;;
      esac
    fi

    gpg --decrypt $file > "$(raw_file_for $file)"
  done
}

case $1 in
  burn|whoknows|addperson|hide|init|diff|reveal|clean) $@;;
  *)
    echo "Invalid command $1"
    echo "$(basename $0) [burn|whoknows|addperson|hide|init|diff|reveal|clean]"
    exit 1;;
esac
